name: Test adapter

on:
  workflow_call:
    secrets:
      AZ_CLIENT_ID:
        required: true
      AZ_CLIENT_SECRET:
        required: true
      GIT_PRIVATE_TOKEN:
        description: 'github token to install makini vendor'
        required: true
    inputs:
      adapter-image:
        type: string
        description: 'Adapter image to pull for testing'
        required: false
      test-image:
        type: string
        description: 'Image to use for testing'
        required: true
      test-options:
        type: string
        description: 'Jest CLI arguments'
        required: false
      env-file:
        type: string
        description: '.env file contents'
        required: false
      waiting-app-start:
        type: boolean
        description: 'waiting Nodejs application starts'
        required: false

jobs:
  integration-test:
    runs-on: [self-hosted]
    steps:
      - name: Login to Azure ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.acr-registry }}
          username: ${{ secrets.AZ_CLIENT_ID }}
          password: ${{ secrets.AZ_CLIENT_SECRET }}

      - name: Checkout code
        if: '!inputs.adapter-image'
        uses: actions/checkout@v2

      - name: Docker pull adapter image
        if: 'inputs.adapter-image'
        run: docker pull ${{ inputs.adapter-image }}

      - name: Docker pull testing image
        run: docker pull ${{ inputs.test-image }}

      - name: Pull mongodb
        run: docker pull mongo

      - name: create a network
        run: docker network create --driver=bridge --subnet=192.168.10.0/24 --gateway=192.168.10.1 adapter-test-net

      - name: Create env file
        run: |
          cat > .env << EOF
            ADAPTER_CREDENTIALS=${{ secrets.ADAPTER_CREDENTIALS }}
            ADAPTER_URL=http://adapter:80
            API_URL=http://test:3000
            MONGO_DSN=mongodb://mongo:27017
            ${{ inputs.env-file }}
          EOF

      - name: View env
        run : cat .env

      - name : Build image
        if: '!inputs.adapter-image'
        run: |
          export GIT_PRIVATE_TOKEN=${{ secrets.GIT_PRIVATE_TOKEN }}
          docker build --build-arg GIT_PRIVATE_TOKEN --file ./Dockerfile --tag adapter .

      - name: Launch container
        if: '!inputs.adapter-image'
        run: docker run -d --name=adapter --hostname=adapter -p 80:80 --net=adapter-test-net --env-file .env adapter

      - name: Launch container
        if: 'inputs.adapter-image'
        run: docker run -d --name=adapter --hostname=adapter --net=adapter-test-net --env-file .env ${{ inputs.adapter-image }}

      - name: run mongodb
        run: docker run -d --name=mongodb --hostname=mongo --net=adapter-test-net -t mongo

      - name: show all docker containers
        run: sleep 5 && docker ps

      - name: Waiting app to be ready
        if: 'inputs.waiting-app-start'
        run: |
          for i in {1..60}; do
           timeout 1 curl -I -s localhost:80 | grep HTTP |grep 20 && exit 0 || true;
           sleep 2;
           #
           if [[ "$i" == 30 ]]; then
             echo "Err: Timed out waiting for app to be ready.";
             echo "Last logs seeing in \"adapter\" container: "
             docker logs adapter
             echo "Exit now."; exit 1
           fi
          done

      - name: Run testing with testing image
        shell: bash {0}
        run: |
          docker run --name=test --hostname=test --net=adapter-test-net --env-file .env -t ${{ inputs.test-image }} {{ inputs.test-options }}
          status=$?
          if test $status -eq 1
          then
            echo '--- Container logs ---'
            docker logs adapter
            exit 1
          fi
