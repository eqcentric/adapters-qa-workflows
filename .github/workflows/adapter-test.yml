name: Test adapter

on:
  workflow_call:
    inputs:
      aws-access-key-id:
        type: string
        description: 'AWS Access Key ID'
        required: true
      aws-secret-access-key:
        type: string
        description: 'AWS Secret Access Key'
        required: true
      aws-region:
        type: string
        description: 'AWS Region, e.g. us-east-2'
        required: true
      adapter-credentials:
        type: string
        description: 'Adapter credentials in JSON format'
        required: true
      test-image:
        type: string
        description: 'Image to use for testing'
        required: true

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker pull testing image
        run: docker pull {{inputs.test-image}}:latest

      - name: Pull mongodb
        run: docker pull mongo

      - name: create a network
        run: docker network create --driver=bridge --subnet=192.168.10.0/24 --gateway=192.168.10.1 adapter-test-net

      - name: Create env file
        run: |
          cat > .env << EOF
            ADAPTER_CREDENTIALS=${{inputs.adapter-credentials}}
            ADAPTER_URL=http://adapter:80
            API_URL=http://test:3000
            MONGO_DSN=mongodb://mongo:27017
          EOF

      - name : Build image
        run: docker build --file ./Dockerfile --tag adapter .

      - name: Launch container
        run: docker run -d --name=adapter --hostname=adapter --net=adapter-test-net --env-file .env -t adapter

      - name: run mongodb
        run: docker run -d --hostname=mongo --net=adapter-test-net -t mongo

      - name: Run testing with testing image
        run: docker run --name=test --hostname=test --net=adapter-test-net --env-file .env -t {{inputs.test-image}}:latest
